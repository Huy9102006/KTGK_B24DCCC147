import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Post } from '../types/Post';
import './PostForm.css';

interface PostFormProps {
  onSave: (post: Omit<Post, 'id'>) => void;
}

const PostForm = ({ onSave }: PostFormProps) => {
  const navigate = useNavigate();
  
  const [formData, setFormData] = useState({
    title: '',
    author: '',
    thumbnail: '',
    content: '',
    category: 'C√¥ng ngh·ªá' as Post['category']
  });
  
  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  // Validation theo y√™u c·∫ßu
  const validate = () => {
    const newErrors: { [key: string]: string } = {};
    
    // Ti√™u ƒë·ªÅ: B·∫Øt bu·ªôc, √≠t nh·∫•t 10 k√Ω t·ª±
    if (!formData.title.trim()) {
      newErrors.title = 'Ti√™u ƒë·ªÅ l√† b·∫Øt bu·ªôc';
    } else if (formData.title.length < 10) {
      newErrors.title = 'Ti√™u ƒë·ªÅ ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±';
    }
    
    // T√°c gi·∫£: B·∫Øt bu·ªôc, √≠t nh·∫•t 3 k√Ω t·ª±
    if (!formData.author.trim()) {
      newErrors.author = 'T√°c gi·∫£ l√† b·∫Øt bu·ªôc';
    } else if (formData.author.length < 3) {
      newErrors.author = 'T√™n t√°c gi·∫£ ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±';
    }
    
    // N·ªôi dung: B·∫Øt bu·ªôc, √≠t nh·∫•t 50 k√Ω t·ª±
    if (!formData.content.trim()) {
      newErrors.content = 'N·ªôi dung l√† b·∫Øt bu·ªôc';
    } else if (formData.content.length < 50) {
      newErrors.content = 'N·ªôi dung ph·∫£i c√≥ √≠t nh·∫•t 50 k√Ω t·ª±';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // X·ª≠ l√Ω ƒëƒÉng b√†i
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validate()) {
      return;
    }

    // T·ª± ƒë·ªông th√™m ng√†y ƒëƒÉng = ng√†y hi·ªán t·∫°i
    const currentDate = new Date().toLocaleDateString('vi-VN');
    
    const newPost = {
      ...formData,
      date: currentDate
    };

    onSave(newPost);
    
    // Hi·ªÉn th·ªã alert v√† chuy·ªÉn v·ªÅ trang ch·ªß
    alert('ƒêƒÉng b√†i th√†nh c√¥ng!');
    navigate('/');
  };

  // Button H·ªßy - quay l·∫°i trang ch·ªß
  const handleCancel = () => {
    navigate('/');
  };

  return (
    <div className="post-form-container">
      <h1>T·∫°o b√†i vi·∫øt m·ªõi</h1>
      <form onSubmit={handleSubmit} className="post-form">
        
        {/* Ti√™u ƒë·ªÅ */}
        <div className="form-group">
          <label>Ti√™u ƒë·ªÅ *</label>
          <input
            type="text"
            value={formData.title}
            onChange={(e) => setFormData({ ...formData, title: e.target.value })}
            className={errors.title ? 'error' : ''}
            placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt (t·ªëi thi·ªÉu 10 k√Ω t·ª±)"
          />
          {errors.title && <span className="error-message">{errors.title}</span>}
        </div>

        {/* T√°c gi·∫£ */}
        <div className="form-group">
          <label>T√°c gi·∫£ *</label>
          <input
            type="text"
            value={formData.author}
            onChange={(e) => setFormData({ ...formData, author: e.target.value })}
            className={errors.author ? 'error' : ''}
            placeholder="Nh·∫≠p t√™n t√°c gi·∫£ (t·ªëi thi·ªÉu 3 k√Ω t·ª±)"
          />
          {errors.author && <span className="error-message">{errors.author}</span>}
        </div>

        {/* URL ·∫£nh thumbnail */}
        <div className="form-group">
          <label>URL ·∫£nh thumbnail</label>
          <input
            type="text"
            value={formData.thumbnail}
            onChange={(e) => setFormData({ ...formData, thumbnail: e.target.value })}
            placeholder="Nh·∫≠p URL ·∫£nh thumbnail (kh√¥ng b·∫Øt bu·ªôc)"
          />
        </div>

        {/* Th·ªÉ lo·∫°i/Category */}
        <div className="form-group">
          <label>Th·ªÉ lo·∫°i</label>
          <select
            value={formData.category}
            onChange={(e) => setFormData({ ...formData, category: e.target.value as Post['category'] })}
          >
            <option value="C√¥ng ngh·ªá">C√¥ng ngh·ªá</option>
            <option value="Du l·ªãch">Du l·ªãch</option>
            <option value="·∫®m th·ª±c">·∫®m th·ª±c</option>
            <option value="ƒê·ªùi s·ªëng">ƒê·ªùi s·ªëng</option>
            <option value="Kh√°c">Kh√°c</option>
          </select>
        </div>

        {/* N·ªôi dung b√†i vi·∫øt */}
        <div className="form-group">
          <label>N·ªôi dung *</label>
          <textarea
            rows={10}
            value={formData.content}
            onChange={(e) => setFormData({ ...formData, content: e.target.value })}
            className={errors.content ? 'error' : ''}
            placeholder="Nh·∫≠p n·ªôi dung b√†i vi·∫øt (t·ªëi thi·ªÉu 50 k√Ω t·ª±)"
          />
          {errors.content && <span className="error-message">{errors.content}</span>}
          <div className="char-count">
            {formData.content.length} k√Ω t·ª±
          </div>
        </div>

        {/* Buttons */}
        <div className="form-actions">
          <button type="submit" className="btn btn-submit">
            üìù ƒêƒÉng b√†i
          </button>
          <button type="button" onClick={handleCancel} className="btn btn-cancel">
            ‚ùå H·ªßy
          </button>
        </div>
      </form>
    </div>
  );
};

export default PostForm;
